From 91a230da68313f1342dd341f3cf53d95fa8aaea2 Mon Sep 17 00:00:00 2001
From: Anson Huang <b20788@freescale.com>
Date: Fri, 6 Jul 2012 19:10:06 +0800
Subject: [PATCH 1737/2463] ENGR00216031 [MX6]Need to force bus freq to
 highest point when suspend

1. When bus freq is at 400M setpoint, currently bus freq will not
set to high setpoint when suspend, but some drivers which need
high bus freq enable clock before bus freq resume, so the request
of high bus freq will be ignore until next high bus freq device is
enabled,it will result in some devices need high bus freq but bus freq
dirver stay at med setpoint. So we need to force bus freq to
highest setpoint before suspend to avoid such scenario.

2. Clean up PU LDO turn on/off, move to regulator driver and maintain by
VPU and GPU driver.

Signed-off-by: Anson Huang <b20788@freescale.com>
---
 arch/arm/mach-mx6/bus_freq.c             |  130 +++++-------------------------
 arch/arm/mach-mx6/mx6_anatop_regulator.c |  129 ++++++++++++++++++++++++++++--
 2 files changed, 145 insertions(+), 114 deletions(-)

diff --git a/arch/arm/mach-mx6/bus_freq.c b/arch/arm/mach-mx6/bus_freq.c
index a123295..26002b1 100644
--- a/arch/arm/mach-mx6/bus_freq.c
+++ b/arch/arm/mach-mx6/bus_freq.c
@@ -78,7 +78,6 @@ void set_ddr_freq(int ddr_freq);
 extern int init_mmdc_settings(void);
 extern struct cpu_op *(*get_cpu_op)(int *op);
 extern int update_ddr_freq(int ddr_rate);
-extern void __iomem *gpc_base;
 
 struct mutex bus_freq_mutex;
 
@@ -93,7 +92,6 @@ static struct clk *ahb_clk;
 static struct clk *periph_clk;
 static struct clk *osc_clk;
 static struct clk *cpu_clk;
-static unsigned int org_ldo;
 static struct clk *pll3;
 static struct clk *pll2;
 static struct clk *pll3_sw_clk;
@@ -104,8 +102,6 @@ static struct delayed_work low_bus_freq_handler;
 
 static void reduce_bus_freq_handler(struct work_struct *work)
 {
-	unsigned long reg;
-
 	if (low_bus_freq_mode || !low_freq_bus_used())
 		return;
 
@@ -175,48 +171,8 @@ static void reduce_bus_freq_handler(struct work_struct *work)
 	high_bus_freq_mode = 0;
 	med_bus_freq_mode = 0;
 
-	/* Do not disable PU LDO if it is not enabled */
-	reg = __raw_readl(ANADIG_REG_CORE) & (ANADIG_REG_TARGET_MASK << ANADIG_REG1_PU_TARGET_OFFSET);
-	if ((low_bus_freq_mode || audio_bus_freq_mode) && reg != 0) {
-		/* Disable the brown out detection since we are going to be
-		  * disabling the LDO.
-		  */
-		reg = __raw_readl(ANA_MISC2_BASE_ADDR);
-		reg &= ~ANADIG_ANA_MISC2_REG1_BO_EN;
-		__raw_writel(reg, ANA_MISC2_BASE_ADDR);
-
-		/* Power gate the PU LDO. */
-		/* Power gate the PU domain first. */
-		/* enable power down request */
-		reg = __raw_readl(gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
-		__raw_writel(reg | 0x1, gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
-		/* power down request */
-		reg = __raw_readl(gpc_base + GPC_CNTR_OFFSET);
-		__raw_writel(reg | 0x1, gpc_base + GPC_CNTR_OFFSET);
-		/* Wait for power down to complete. */
-		while (__raw_readl(gpc_base + GPC_CNTR_OFFSET) & 0x1)
-			;
-
-		/* Mask the ANATOP brown out interrupt in the GPC. */
-		reg = __raw_readl(gpc_base + 0x14);
-		reg |= 0x80000000;
-		__raw_writel(reg, gpc_base + 0x14);
-
-		/* PU power gating. */
-		reg = __raw_readl(ANADIG_REG_CORE);
-		org_ldo = reg & (ANADIG_REG_TARGET_MASK << ANADIG_REG1_PU_TARGET_OFFSET);
-		reg &= ~(ANADIG_REG_TARGET_MASK << ANADIG_REG1_PU_TARGET_OFFSET);
-		__raw_writel(reg, ANADIG_REG_CORE);
-
-		/* Clear the BO interrupt in the ANATOP. */
-		reg = __raw_readl(ANADIG_MISC1_REG);
-		reg |= 0x80000000;
-		__raw_writel(reg, ANADIG_MISC1_REG);
-	}
-
 	mutex_unlock(&bus_freq_mutex);
 }
-
 /* Set the DDR, AHB to 24MHz.
   * This mode will be activated only when none of the modules that
   * need a higher DDR or AHB frequency are active.
@@ -241,8 +197,6 @@ int set_low_bus_freq(void)
  */
 int set_high_bus_freq(int high_bus_freq)
 {
-	unsigned long reg;
-
 	if (busfreq_suspended)
 		return 0;
 
@@ -271,66 +225,28 @@ int set_high_bus_freq(int high_bus_freq)
 		return 0;
 	}
 
-	/* Enable the PU LDO */
-	if (low_bus_freq_mode || audio_bus_freq_mode) {
-		/* Set the voltage of VDDPU as in normal mode. */
-		__raw_writel(org_ldo | (__raw_readl(ANADIG_REG_CORE) &
-		(~(ANADIG_REG_TARGET_MASK << ANADIG_REG1_PU_TARGET_OFFSET))), ANADIG_REG_CORE);
-
-		/* Need to wait for the regulator to come back up */
-		/*
-		 * Delay time is based on the number of 24MHz clock cycles
-		 * programmed in the ANA_MISC2_BASE_ADDR for each
-		 * 25mV step.
-		 */
-		udelay(150);
-
-		/* enable power up request */
-		reg = __raw_readl(gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
-		__raw_writel(reg | 0x1, gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
-		/* power up request */
-		reg = __raw_readl(gpc_base + GPC_CNTR_OFFSET);
-		__raw_writel(reg | 0x2, gpc_base + GPC_CNTR_OFFSET);
-		/* Wait for the power up bit to clear */
-		while (__raw_readl(gpc_base + GPC_CNTR_OFFSET) & 0x2)
-			;
-
-		/* Enable the Brown Out detection. */
-		reg = __raw_readl(ANA_MISC2_BASE_ADDR);
-		reg |= ANADIG_ANA_MISC2_REG1_BO_EN;
-		__raw_writel(reg, ANA_MISC2_BASE_ADDR);
-
-		/* Unmask the ANATOP brown out interrupt in the GPC. */
-		reg = __raw_readl(gpc_base + 0x14);
-		reg &= ~0x80000000;
-		__raw_writel(reg, gpc_base + 0x14);
-
-		if (cpu_is_mx6sl()) {
-			/* Set periph_clk to be sourced from pll2_pfd2_400M */
-			/* First need to set the divider before changing the */
-			/* parent if parent clock is larger than previous one */
-			clk_set_rate(ahb_clk, clk_round_rate(ahb_clk,
-							     LPAPM_CLK / 3));
-			clk_set_rate(axi_clk,
-				     clk_round_rate(axi_clk, LPAPM_CLK / 2));
-			clk_set_parent(periph_clk, pll2_400);
-
-			/* Set mmdc_clk_root to be sourced */
-			/* from pll2_pfd2_400M */
-			clk_set_rate(mmdc_ch0_axi,
-				     clk_round_rate(mmdc_ch0_axi,
-						    LPAPM_CLK / 2));
-			clk_set_parent(mmdc_ch0_axi, pll3_sw_clk);
-			clk_set_parent(mmdc_ch0_axi, pll2_400);
-			clk_set_rate(mmdc_ch0_axi,
-				     clk_round_rate(mmdc_ch0_axi, DDR_MED_CLK));
-
-			high_bus_freq_mode = 1;
-			med_bus_freq_mode = 0;
-		}
-	}
+	if (cpu_is_mx6sl()) {
+		/* Set periph_clk to be sourced from pll2_pfd2_400M */
+		/* First need to set the divider before changing the */
+		/* parent if parent clock is larger than previous one */
+		clk_set_rate(ahb_clk, clk_round_rate(ahb_clk,
+						     LPAPM_CLK / 3));
+		clk_set_rate(axi_clk,
+			     clk_round_rate(axi_clk, LPAPM_CLK / 2));
+		clk_set_parent(periph_clk, pll2_400);
+
+		/* Set mmdc_clk_root to be sourced */
+		/* from pll2_pfd2_400M */
+		clk_set_rate(mmdc_ch0_axi,
+		     clk_round_rate(mmdc_ch0_axi, LPAPM_CLK / 2));
+		clk_set_parent(mmdc_ch0_axi, pll3_sw_clk);
+		clk_set_parent(mmdc_ch0_axi, pll2_400);
+		clk_set_rate(mmdc_ch0_axi,
+		     clk_round_rate(mmdc_ch0_axi, DDR_MED_CLK));
 
-	if (!cpu_is_mx6sl()) {
+		high_bus_freq_mode = 1;
+		med_bus_freq_mode = 0;
+	} else {
 		clk_enable(pll3);
 		if (high_bus_freq) {
 			update_ddr_freq(ddr_normal_rate);
@@ -361,7 +277,6 @@ int set_high_bus_freq(int high_bus_freq)
 	return 0;
 }
 
-
 int low_freq_bus_used(void)
 {
 	if (!bus_freq_scaling_initialized)
@@ -417,8 +332,7 @@ static ssize_t bus_freq_scaling_enable_store(struct device *dev,
 
 static int busfreq_suspend(struct platform_device *pdev, pm_message_t message)
 {
-	if (low_bus_freq_mode || audio_bus_freq_mode)
-		set_high_bus_freq(1);
+	set_high_bus_freq(1);
 	busfreq_suspended = 1;
 	return 0;
 }
diff --git a/arch/arm/mach-mx6/mx6_anatop_regulator.c b/arch/arm/mach-mx6/mx6_anatop_regulator.c
index fd7e0c3..09229e4 100644
--- a/arch/arm/mach-mx6/mx6_anatop_regulator.c
+++ b/arch/arm/mach-mx6/mx6_anatop_regulator.c
@@ -34,9 +34,15 @@
 #include "crm_regs.h"
 #include "regs-anadig.h"
 
+#define GPC_PGC_GPU_PGCR_OFFSET	0x260
+#define GPC_CNTR_OFFSET		0x0
+
 extern struct platform_device sgtl5000_vdda_reg_devices;
 extern struct platform_device sgtl5000_vddio_reg_devices;
 extern struct platform_device sgtl5000_vddd_reg_devices;
+extern void __iomem *gpc_base;
+
+static unsigned int org_ldo;
 
 static int get_voltage(struct anatop_regulator *sreg)
 {
@@ -82,6 +88,108 @@ static int set_voltage(struct anatop_regulator *sreg, int uv)
 	}
 }
 
+static int pu_enable(struct anatop_regulator *sreg)
+{
+	unsigned int reg;
+
+	/* Do not enable PU LDO if it is already enabled */
+	reg = __raw_readl(ANADIG_REG_CORE) & (ANADIG_REG_TARGET_MASK
+		<< ANADIG_REG1_PU_TARGET_OFFSET);
+	if (reg != 0)
+		return 0;
+
+	/* Set the voltage of VDDPU as in normal mode. */
+	__raw_writel(org_ldo | (__raw_readl(ANADIG_REG_CORE) &
+	(~(ANADIG_REG_TARGET_MASK << ANADIG_REG1_PU_TARGET_OFFSET))), ANADIG_REG_CORE);
+
+	/* Need to wait for the regulator to come back up */
+	/*
+	 * Delay time is based on the number of 24MHz clock cycles
+	 * programmed in the ANA_MISC2_BASE_ADDR for each
+	 * 25mV step.
+	 */
+	udelay(150);
+
+	/* enable power up request */
+	reg = __raw_readl(gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
+	__raw_writel(reg | 0x1, gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
+	/* power up request */
+	reg = __raw_readl(gpc_base + GPC_CNTR_OFFSET);
+	__raw_writel(reg | 0x2, gpc_base + GPC_CNTR_OFFSET);
+	/* Wait for the power up bit to clear */
+	while (__raw_readl(gpc_base + GPC_CNTR_OFFSET) & 0x2)
+		;
+
+	/* Enable the Brown Out detection. */
+	reg = __raw_readl(ANA_MISC2_BASE_ADDR);
+	reg |= ANADIG_ANA_MISC2_REG1_BO_EN;
+	__raw_writel(reg, ANA_MISC2_BASE_ADDR);
+
+	/* Unmask the ANATOP brown out interrupt in the GPC. */
+	reg = __raw_readl(gpc_base + 0x14);
+	reg &= ~0x80000000;
+	__raw_writel(reg, gpc_base + 0x14);
+
+	return 0;
+}
+
+static int pu_disable(struct anatop_regulator *sreg)
+{
+	unsigned int reg;
+
+	/* Do not disable PU LDO if it is not enabled */
+	reg = __raw_readl(ANADIG_REG_CORE) & (ANADIG_REG_TARGET_MASK
+		<< ANADIG_REG1_PU_TARGET_OFFSET);
+	if (reg == 0)
+		return 0;
+
+	/* Disable the brown out detection since we are going to be
+	  * disabling the LDO.
+	  */
+	reg = __raw_readl(ANA_MISC2_BASE_ADDR);
+	reg &= ~ANADIG_ANA_MISC2_REG1_BO_EN;
+	__raw_writel(reg, ANA_MISC2_BASE_ADDR);
+
+	/* Power gate the PU LDO. */
+	/* Power gate the PU domain first. */
+	/* enable power down request */
+	reg = __raw_readl(gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
+	__raw_writel(reg | 0x1, gpc_base + GPC_PGC_GPU_PGCR_OFFSET);
+	/* power down request */
+	reg = __raw_readl(gpc_base + GPC_CNTR_OFFSET);
+	__raw_writel(reg | 0x1, gpc_base + GPC_CNTR_OFFSET);
+	/* Wait for power down to complete. */
+	while (__raw_readl(gpc_base + GPC_CNTR_OFFSET) & 0x1)
+			;
+
+	/* Mask the ANATOP brown out interrupt in the GPC. */
+	reg = __raw_readl(gpc_base + 0x14);
+	reg |= 0x80000000;
+	__raw_writel(reg, gpc_base + 0x14);
+
+	/* PU power gating. */
+	reg = __raw_readl(ANADIG_REG_CORE);
+	org_ldo = reg & (ANADIG_REG_TARGET_MASK << ANADIG_REG1_PU_TARGET_OFFSET);
+	reg &= ~(ANADIG_REG_TARGET_MASK << ANADIG_REG1_PU_TARGET_OFFSET);
+	__raw_writel(reg, ANADIG_REG_CORE);
+
+	/* Clear the BO interrupt in the ANATOP. */
+	reg = __raw_readl(ANADIG_MISC1_REG);
+	reg |= 0x80000000;
+	__raw_writel(reg, ANADIG_MISC1_REG);
+	return 0;
+}
+static int is_pu_enabled(struct anatop_regulator *sreg)
+{
+	unsigned int reg;
+
+	reg = __raw_readl(ANADIG_REG_CORE) & (ANADIG_REG_TARGET_MASK
+		<< ANADIG_REG1_PU_TARGET_OFFSET);
+	if (reg == 0)
+		return 0;
+	else
+		return 1;
+}
 static int enable(struct anatop_regulator *sreg)
 {
 	return 0;
@@ -101,9 +209,9 @@ static struct anatop_regulator_data vddpu_data = {
 	.name		= "vddpu",
 	.set_voltage	= set_voltage,
 	.get_voltage	= get_voltage,
-	.enable		= enable,
-	.disable	= disable,
-	.is_enabled	= is_enabled,
+	.enable		= pu_enable,
+	.disable	= pu_disable,
+	.is_enabled	= is_pu_enabled,
 	.control_reg	= (u32)(MXC_PLL_BASE + HW_ANADIG_REG_CORE),
 	.vol_bit_shift	= 9,
 	.vol_bit_mask	= 0x1F,
@@ -193,6 +301,15 @@ static struct regulator_consumer_supply vddcore_consumers[] = {
 		.supply = "cpu_vddgp",
 	}
 };
+/* PU */
+static struct regulator_consumer_supply vddpu_consumers[] = {
+	{
+		.supply = "cpu_vddvpu",
+	},
+	{
+		.supply = "cpu_vddgpu",
+	}
+};
 
 static struct regulator_init_data vddpu_init = {
 	.constraints = {
@@ -202,11 +319,11 @@ static struct regulator_init_data vddpu_init = {
 		.valid_modes_mask	= REGULATOR_MODE_FAST |
 					  REGULATOR_MODE_NORMAL,
 		.valid_ops_mask		= REGULATOR_CHANGE_VOLTAGE |
+					  REGULATOR_CHANGE_STATUS |
 					  REGULATOR_CHANGE_MODE,
-		.always_on		= 1,
 	},
-	.num_consumer_supplies = 0,
-	.consumer_supplies = NULL,
+	.num_consumer_supplies = ARRAY_SIZE(vddpu_consumers),
+	.consumer_supplies = vddpu_consumers,
 };
 
 static struct regulator_init_data vddcore_init = {
-- 
1.7.7.4

